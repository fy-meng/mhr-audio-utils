//------------------------------------------------
//--- 010 Editor v14.0 Script File
//
//      File: mhr-bnk-seq.1sc
//   Authors: Fanyu Meng
//   Version: 0.1
//   Purpose: Inject a music into `natives\STM\Sound\Wwise\bgm_special01_ev_str.bnk.2.X64`.
//------------------------------------------------
const string TITLE = "MHR Arena BNK Sequence Injector";
const int SWITCH_ID_0 = 41;
const int SWITCH_ID_1 = 116;
const int TYPE_SEQ_CNTR = 12;
const int TREE_NODE_SIZE = 12;

const int SEQ_SIZE = 810;
const int SEQ_NUM_ITEMS = 7;

const uint HASH_TYPE1 = 408582742;
const uint HASH_FIELD = 514358619;

if(!exists(hirc) || hirc.numHIRCItems <= SWITCH_ID_1 || hirc.items.item[SWITCH_ID_0].type != TYPE_SEQ_CNTR || hirc.items.item[SWITCH_ID_1].type != TYPE_SEQ_CNTR) {
    MessageBox(idOk, TITLE, "Invalid arena BNK.");
}

local uint32 hash = InputNumber(TITLE, "Trigger Hash:", "0");
if(hash == BAD_VALUE) {
    MessageBox(idOk, TITLE, "Invalid trigger hash.");
    return -1;
}

local uint32 nodeID = InputNumber(TITLE, "Sequence container UID:", "0");
if(hash == BAD_VALUE) {
    MessageBox(idOk, TITLE, "Invalid sequence container UID.");
    return -1;
}

// ======== insert the new sequence ========
local string filename = InputOpenFileName("Choose modified sequence template:", "All files (*.*)|*.*");
if(Strlen(filename) == 0) {
    MessageBox(idOk, TITLE, "Error: Invalid file.");
    return -1;
}
local int prevFileSize = FileSize();
if(InsertFile(filename, FileSize()) < 0) {
    MessageBox(idOk, TITLE, "An error occured opening file '%s'.", filename);
    return -1;
}
if(FileSize() - prevFileSize != SEQ_SIZE) {
    MessageBox(idOk, TITLE, "Error: sequence file size is not compatible.");
    return -1;
}

hirc.size += SEQ_SIZE;
hirc.numHIRCItems += SEQ_NUM_ITEMS;

// ======== handle the second tree ========
// The node to be inserted should be 
// root         - existing children       - ...
//        (new) - [key=hash, nChild=1]    - [key=408582742, nChild=1]   - [key=514358619, nodeID=nodeID]
// The new new node should be inserted such that the first level children are sorted by their key
// 1. Find the corresponding index of the new tree node
local int idx = 0;
for(idx = 0; idx < hirc.items.item[SWITCH_ID_1].tree.root.numChildren; idx++) {
    if(hash == hirc.items.item[SWITCH_ID_1].tree.root.children[idx].key) {
        MessageBox(idOk, TITLE, "Hash collision!");
        return -1;
    } else if (hash < hirc.items.item[SWITCH_ID_1].tree.root.children[idx].key) {
        break;
    }
}
Printf("insert idx: %d\n", idx);
// 2. Change all of the existing childStartIDx values
local int i, j;
for(i = 0; i < idx; i++) {
     hirc.items.item[SWITCH_ID_1].tree.root.children[i].childrenStartIDx += 1;
}
for(i = idx; i < hirc.items.item[SWITCH_ID_1].tree.root.numChildren; i++) {
     hirc.items.item[SWITCH_ID_1].tree.root.children[i].childrenStartIDx += 2;
}
// 3. Insert 3 new nodes
local int pos;
pos = startof(hirc.items.item[SWITCH_ID_1].tree.root.children[idx - 1]) + TREE_NODE_SIZE;
local int childStartIDx = hirc.items.item[SWITCH_ID_1].tree.root.children[idx - 1].childrenStartIDx + 1;
Printf("child start: %d\n", childStartIDx);
InsertBytes(pos, TREE_NODE_SIZE);
WriteUInt(pos, hash);                   // hash of the trigger, can be set via lua
WriteUShort(pos + 4, childStartIDx);    // childStartPos
WriteUShort(pos + 6, 1);                // numChildren
WriteUShort(pos + 8, 50);               // weight
WriteUShort(pos + 10, 100);             // probability

pos = startof(hirc.items.item[SWITCH_ID_1].tree.root) + childStartIDx * TREE_NODE_SIZE;
InsertBytes(pos, TREE_NODE_SIZE);
WriteUInt(pos, HASH_TYPE1);             // hash of string "type1"
WriteUInt(pos + 4, nodeID);             // audioNodeID
WriteUShort(pos + 8, 50);               // weight
WriteUShort(pos + 10, 100);             // probability

// 4. Edit metadata to cleanup
hirc.items.item[SWITCH_ID_1].tree.root.numChildren += 1;
hirc.items.item[SWITCH_ID_1].tree.size += 2 * TREE_NODE_SIZE;
hirc.items.item[SWITCH_ID_1].size += 2 * TREE_NODE_SIZE;
hirc.size += 2 * TREE_NODE_SIZE;

// ======== handle the first tree ========
// The node to be inserted should be 
// root         - existing children       - ...
//        (new) - [key=hash, nChild=1]    - [key=408582742, nodeID=nodeID]
// The new new node should be inserted such that the first level children are sorted by their key
// 1. Find the corresponding index of the new tree node
for(idx = 0; idx < hirc.items.item[SWITCH_ID_0].tree.root.numChildren; idx++) {
    if(hash == hirc.items.item[SWITCH_ID_0].tree.root.children[idx].key) {
        MessageBox(idOk, TITLE, "Hash collision!");
        return -1;
    } else if (hash < hirc.items.item[SWITCH_ID_0].tree.root.children[idx].key) {
        break;
    }
}
Printf("insert idx: %d\n", idx);
// 2. Change all of the existing childStartIDx values
for(i = 0; i < idx; i++) {
     hirc.items.item[SWITCH_ID_0].tree.root.children[i].childrenStartIDx += 1;
     for(j = 0; j < hirc.items.item[SWITCH_ID_0].tree.root.children[i].numChildren; j++)
        hirc.items.item[SWITCH_ID_0].tree.root.children[i].children[j].childrenStartIDx += 1;
}
for(i = idx; i < hirc.items.item[SWITCH_ID_0].tree.root.numChildren; i++) {
     hirc.items.item[SWITCH_ID_0].tree.root.children[i].childrenStartIDx += 3;
     for(j = 0; j < hirc.items.item[SWITCH_ID_0].tree.root.children[i].numChildren; j++)
        hirc.items.item[SWITCH_ID_0].tree.root.children[i].children[j].childrenStartIDx += 3;
}
// 3. Insert 3 new nodes
pos = startof(hirc.items.item[SWITCH_ID_0].tree.root.children[idx - 1]) + TREE_NODE_SIZE;
local int childStartIDx1 = hirc.items.item[SWITCH_ID_0].tree.root.children[idx - 1].childrenStartIDx + 2;
local int childStartIDx2 = hirc.items.item[SWITCH_ID_0].tree.root.children[idx - 1].children[0].childrenStartIDx + 2;

InsertBytes(pos, TREE_NODE_SIZE);
WriteUInt(pos, hash);                   // hash of the trigger, can be set via lua
WriteUShort(pos + 4, childStartIDx1);   // childStartPos
WriteUShort(pos + 6, 1);                // numChildren
WriteUShort(pos + 8, 50);               // weight
WriteUShort(pos + 10, 100);             // probability

pos = startof(hirc.items.item[SWITCH_ID_0].tree.root) + childStartIDx1 * TREE_NODE_SIZE;
InsertBytes(pos, TREE_NODE_SIZE * 2);
WriteUInt(pos, HASH_TYPE1);             // hash of string "type1"
WriteUShort(pos + 4, childStartIDx2);   // childStartPos
WriteUShort(pos + 6, 1);                // numChildren
WriteUShort(pos + 8, 50);               // weight
WriteUShort(pos + 10, 100);             // probability

WriteUInt(pos + 12, HASH_FIELD);        // hash of string "field"
WriteUInt(pos + 16, nodeID);            // audioNodeID
WriteUShort(pos + 20, 50);              // weight
WriteUShort(pos + 22, 100);             // probability

// 4. Edit metadata to cleanup
hirc.items.item[SWITCH_ID_0].tree.root.numChildren += 1;
hirc.items.item[SWITCH_ID_0].tree.size += 3 * TREE_NODE_SIZE;
hirc.items.item[SWITCH_ID_0].size += 3 * TREE_NODE_SIZE;
hirc.size += 3 * TREE_NODE_SIZE;
